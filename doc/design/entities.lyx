#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass orebook
\language english
\inputencoding auto
\fontscheme palatino
\graphics default
\paperfontsize 10
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Database model and data entities
\layout Author

Juan J.
 García de Soria
\layout Date

$Id: entities.lyx,v 1.10 2004/12/21 16:11:46 skandalfo Exp $
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset FloatList figure

\end_inset 


\layout Standard


\begin_inset FloatList table

\end_inset 


\layout Chapter

Database model concepts
\layout Standard

The database model for ORE will have to deal with the following kinds of
 data:
\layout Itemize

User/Customer Accounts and related Subscriptions.
\layout Itemize

Product/Service/Catalog definitions.
\layout Itemize

Parameter Definitions and Values.
\layout Itemize

Event Types and Rated Event Records.
\layout Itemize

Invoices.
\layout Itemize

Business procedures:
\begin_deeper 
\layout Itemize

Event Guidance Procedures.
\layout Itemize

Event Rating Procedures.
\layout Itemize

Subscription Modifier Procedures.
\layout Itemize

Billing Modifier Procedures.
\end_deeper 
\layout Section

User and Customer Accounts
\layout Standard


\begin_inset Note
collapsed false

\layout Standard

We need to include some figures here in order to illustrate the concepts.
\end_inset 


\layout Standard

An Account will be the entity to represent a single customer or user in
 the service platform.
 Actually it represents a single billable entity, although it is not a monetary-
only concept, since it could refer to several currencies at the same time,
 and will usually contain associated contact data.
\layout Standard

That said, a single account will typically contain data for the following
 kinds of informations:
\layout Itemize

Default, secondary currencies.
\layout Itemize

Currency balances.
\layout Itemize

Billing period and date information.
\layout Itemize

Account status (active/blocked/deleted...).
\layout Itemize

Commercial model information determining the Products available for the
 Account, including the Catalog assigned to a given Account.
\layout Itemize

Contact data, like:
\layout Itemize

Personal data (Name, surname...).
\layout Itemize

Address.
\layout Itemize

Phone number(s).
\layout Itemize

E-mail address(es).
\layout Itemize

Additional parameter values as needed for the specific deployment.
\layout Itemize

Product and associated Service Subscriptions, representing each service
 that the Account has subscribed to with the operator.
\layout Standard

Each independent field or parameter value may be optional depending on specific
 deployment needs, and may be assigned a default value for the whole platform.
\layout Standard

Each Account may have a parent Account.
 In that case, the child Account inherits every parameter value defined
 in the parent Account, except for the ones overridden or redefined at the
 child Account level.
 See figure 
\begin_inset LatexCommand \ref{cap:Account-inheritance.}

\end_inset 

 for an example of Account inheritance.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard


\begin_inset Graphics
	filename entities_img/Account-Inheritance
	width 100col%

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Account-inheritance.}

\end_inset 

Account inheritance.
\end_inset 


\layout Section

Product, Service and Catalog information
\layout Standard

Services, Products and Catalogs model the services that a company offers
 to their customers and the way in which they are sold.
\layout Subsection

Services
\layout Standard


\begin_inset Note
collapsed false

\layout Standard

We need to include some figures here in order to illustrate the concepts.
\end_inset 


\layout Standard

A Service is the definition of a kind of service that may be provided to
 a customer or user.
\layout Standard

A Service definition may define specific Parameters that determine specific
 characteristics of the Service.
 For instance, for a basic phone Service, the phone number for the subscriber
 line would be a Parameter to be defined.
\layout Standard

Services may be subclassed.
 Each Service may be a root Service, so that it has no parent Service, or
 may inherit from exactly one parent Service.
 When a Service inherits from a parent Service, it inherits all the Parameter
 defined for its parent, as well as any Parameter inherited by its parent
 Service.
\layout Standard

Each root Service defines an Event Type (a definition for the data that
 defines each Service usage) that is inherited and cannot be modified by
 child Services.
\layout Standard

In the same fashion, each root Service defines an event guidance procedure
 that will be used in order to find to which Account and Service Subscription
 every incoming event of the matching Event Type will be routed to.
\layout Standard

Each Service may assign Values for the Parameters that itself defines, or
 for any Parameter inherited from its parent Service, if any.
 If a Service doesn't define a Value for a Parameter, it inherits any Value
 that may be defined or inherited by its parent Service, if any.
\layout Subsection

Products
\layout Standard

Products are combinations of Services that may be sold as a unit to a customer.
 Services themselves may not be sold.
 Each Product will group one or more Services that will be sold together
 under a commercial name.
\layout Standard

Products may define Parameters and give Values to them too, in the same
 way as Services do.
\layout Standard

Products may subclass other products.
 In this case Parameter and Value inheritance applies in the same way as
 it does for Services.
 Additionally, each Product that subclasses another Product inherits it's
 parent Services, and may add new Services to the group of Services inherited.
 However, a child Product definition cannot remove any one of the Services
 inherited from its parent Product.
\layout Subsection

Catalogs
\layout Standard

A Catalog is a group of Products that are available to a given class of
 customers.
 In each one of these groups, each individual Product may be mandatory or
 optional.
 Mandatory Products are automatically subscribed whenever an Account is
 assigned the containing Catalog.
 Optional Products may be subscribed or terminated by the customer afterwards
 in any free combination.
 
\layout Section

Parameter Definitions and Values
\layout Standard

Most of the actual information in ORE related to customers, services and
 subscriptions is stored in the Values of Parameters defined through the
 system.
\layout Subsection

Parameter Definitions
\layout Standard


\begin_inset Note
collapsed false

\layout Standard

We need to include some figures here in order to illustrate the concepts.
\end_inset 


\layout Standard

The Parameters to be used throughout the system have to be configured by
 means of matching Parameter Definitions.
\layout Standard

There are four kind of Parameters:
\layout Description

Account\SpecialChar ~
Parameters: These are Parameters that are related to Accounts.
 They model attributes, characteristics or features related to Account objects
 or customers.
 An example could be the contact phone number for a customer.
\layout Description

Product\SpecialChar ~
Parameters: These are Parameters that are related to Products or
 Product Subscriptions.
 They model attributes, characteristics and features related to the Products
 that customers may subscribe to, or related to the specific Product Subscriptio
ns they may have done to these Products.
 An example could be the end date-time when a given subscription has a minimum
 contract term
\begin_inset Foot
collapsed false

\layout Standard

It would be the date-time to check against when unsubscribing a product
 that may impose penalties for being unsubscribed before six months elapse
 since its subscription, assigned at Product Subscription level.
 The actual period of six months could be another Product Parameter whose
 Value is assigned at Product level.
 The first Parameter Value would be calculated by using the second one by
 a Subscription Modifier Procedure at subscription time.
\end_inset 

.
\layout Description

Service\SpecialChar ~
Parameters: These are Parameters that are related to Services or
 Service Subscriptions.
 They model attributes, characteristics and features related to the Services
 that may be provided to customers, or related to the specific Service Subscript
ions that the customers may have as their rights to receive the Service.
 An example could be the domain, like 
\begin_inset Quotes eld
\end_inset 

mygreatmail.com
\begin_inset Quotes erd
\end_inset 

, that is applied to every e-mail Service that customers of a given e-mail
 provider receive or subscribe
\begin_inset Foot
collapsed false

\layout Standard

The Value would be assigned at Service level, and it would be inherited
 by every Service Subscription that users get via their Product Subscriptions
 to Products including the former Service.
\end_inset 

.
\layout Description

Structure\SpecialChar ~
Type\SpecialChar ~
Parameters: These are special Parameters used in order to define
 composite structure data types as explained in section 
\begin_inset LatexCommand \ref{sub:Structure-Types}

\end_inset 

.
\layout Standard

Apart from applying to different kinds of entities and being subject to
 the inheritance rules defined by those entities, the three kinds of Parameters
 are defined in the same way and may contain the same kinds of information.
\layout Standard

A Parameter definition is done by specifying the following data:
\layout Itemize

Parameter ID (auto-generated by the platform
\begin_inset Foot
collapsed false

\layout Standard

Note that Structure Parameters will use a number of different ID's for each
 one of its component sub-Parameters (fields).
\end_inset 

), that is a numeric unique identifier for the Parameter inside ORE.
\layout Itemize

Parameter definition place, a pointer to the entity on which the Parameter
 is defined
\begin_inset Foot
collapsed false

\layout Standard

This could be a specific Service, a specific Product, a Structure Type,
 or the special case of Parameters defined for every Account.
\end_inset 

.
\layout Itemize

Parameter name, a string with a unique, short name used for Procedures and
 other program entities to identify the Parameter.
\layout Itemize

Parameter label, a text label to display in forms where this parameter may
 be filled in or displayed.
\layout Itemize

Parameter description, a text explaining the Parameter purpose and usage,
 to be shown in tool-tips and help dialogs.
\layout Itemize

Parameter type, the kind of data that the Values for this Parameter are.
 Supported Parameter types in ORE are:
\begin_deeper 
\layout Itemize

String (strings of up to a given maximum number
\begin_inset Foot
collapsed false

\layout Standard

The maximum length of the String-type fields may be configured at database
 schema installation time, and is subject to the limits imposed by the specific
 database management system in use.
 PostgreSQL databases may be configured in order to impose no restriction
 (up to 2GB as of PostgreSQL 7.4) on the length of these Values.
\end_inset 

 
\begin_inset Note
collapsed false

\layout Standard

Shall we force a reasonable limit here that enforces database portability?
 Or shall we use PostgreSQL to its whole functionality and simply use an
 unbounded 
\begin_inset Quotes eld
\end_inset 

text
\begin_inset Quotes erd
\end_inset 

 type?
\end_inset 

 of Unicode characters).
\layout Itemize

Integer (64 bit values).
\layout Itemize

Double (floating point values).
\layout Itemize

Decimal (decimal, arbitrary precision
\begin_inset Foot
collapsed false

\layout Standard

As with the String type, the actual precision may be configured at database
 schema installation time, and is subject to the limits imposed by the specific
 database management system in use.
 PostgreSQL databases as of PostgreSQL version 7.4 may be configured in order
 to impose no restriction precision of these Values.
\end_inset 

 real values).
\layout Itemize

Date-time (millisecond-level 64 bit precision UTC timestamps).
\layout Itemize

Boolean (true or false).
\layout Itemize

ID (numeric identifier) types referring to either:
\begin_deeper 
\layout Itemize

an Account ID.
\layout Itemize

a Catalog ID.
\layout Itemize

a Product ID.
\layout Itemize

a Product Subscription ID.
\layout Itemize

a Service ID.
\layout Itemize

a Service Subscription ID.
\layout Itemize

a Procedure ID.
\end_deeper 
\layout Itemize

List of <a given type> (arbitrary-length, index-based ordered arrays of
 values of a given type).
\layout Itemize

Structure of <set of name,type tuples> (composite type made of fields, each
 field with its own name and type) as defined by a referenced Structure
 Type.
 
\end_deeper 
\layout Itemize

Whether the Parameter is mandatory or not; entities having a definition
 but no value for a mandatory Parameter are not allowed.
\layout Itemize

Whether Parameter Values should be unique; the same Value for a unique Parameter
 may not be repeated.
\layout Itemize

Whether the Parameter Values are historical; Parameters marked as historical
 store their Values in a special format that records how these Values change
 along the time.
 This format consists of a succession of time intervals with a specific
 Value assigned to each one of these time intervals.
 This allows for past Values to be recorded, as well as for future Values
 to be scheduled.
\layout Standard

ORE may pre-define some internal or general Parameters as needed for special
 purposes.
\layout Subsection

Parameter Values
\layout Standard


\begin_inset Note
collapsed false

\layout Standard

We need to include some figures here in order to illustrate the concepts.
\end_inset 


\layout Standard

Values store actual values for the Parameters defined throughout the system.
\layout Standard

Each value stored in ORE consists of the following data:
\layout Itemize

Parameter Value ID (auto-generated by the platform
\begin_inset Foot
collapsed false

\layout Standard

Note that Values for List or Structure Parameters will use a number of different
 ID's for each one of its component sub-Values.
\end_inset 

), that is a numeric unique identifier for the Parameter Value inside ORE.
\layout Itemize

Parameter ID, the identifier of the Parameter Definition which defines this
 kind of Values.
\layout Itemize

Parent Parameter Value ID, the identifier of the parent Parameter Value
 for list or structure Values elements.
\layout Itemize

Parameter Value assignment place, a pointer to the entity on which the Parameter
 has been assigned this Value
\begin_inset Foot
collapsed false

\layout Standard

This could be a specific Service or Service Subscription, a specific Product
 or Product subscription, a specific Account, or the special cases of Parameter
 Values pre-defined for every Account.
\end_inset 

.
\layout Itemize

As alternatives, either of:
\begin_deeper 
\layout Itemize

Actual value
\begin_inset Foot
collapsed false

\layout Standard

Filled in directly for basic-type Parameters, filled in in sub-Values for
 complex (list or structure) Parameters.
\end_inset 

, that may be a value of the type of the Parameter, or the special value
 
\emph on 
delete,
\emph default 
 which means that any inherited Value is discarded for this Parameter.
 Parent entity Values are automatically inherited when no Value is defined
 at a given entity level.
\layout Itemize

Reference to another Parameter Value of the same type that is used as this
 Value had the same value, by including the Parameter ID of the Value to
 reference.
\end_deeper 
\layout Standard

The usage of reference values explained above allows, for instance, to use
 an Account-related Value for a Parameter in a Service Subscription.
 References are restricted to certain combinations that make sense, with
 the allowed combinations shown in table 
\begin_inset LatexCommand \ref{cap:Allowed-Value-references.}

\end_inset 

.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Referenced Parameter type
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Referencing Value assignment place
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Account
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Product
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Service
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
(all Accounts) or Account
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Product or Product Subscription
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

-
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Service or Service Subscription
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OK
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Allowed-Value-references.}

\end_inset 

Allowed Value references.
\end_inset 


\layout Standard

Values for Parameters that are configured to have historical Values are
 stored in a time line like manner.
 That means that each Value is stored multiple times, once for each time
 its Value changes in a new, non-overlapping time segment.
 So, for Values that are historical, two more fields are stored along with
 each Value instance along time:
\layout Itemize

Effective start date-time (millisecond-level 64 bit precision UTC timestamps),
 the timestamp for the instant (included in timestamp comparisons) in which
 the associated Value instance takes effect, with a minimum negative value
 that may be encoded meaning 
\begin_inset Formula $-\infty$
\end_inset 

.
 
\layout Itemize

Effective end date-time (millisecond-level 64 bit precision UTC timestamps),
 the timestamp for the instant (excluded in timestamp comparisons) in which
 the associated Value instance stops being in effect, with a maximum positive
 value that may be encoded meaning 
\begin_inset Formula $+\infty$
\end_inset 

.
 
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard


\begin_inset Graphics
	filename entities_img/Value-Timelines
	width 100col%

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{cap:Time-lines-for-Values}

\end_inset 

Time lines for historical and non-historical Values.
\end_inset 


\layout Standard

For historical Values, these segment delimiters may be used as a part of
 the Parameter Value ID, and inherited by child Values for composite datatypes.
 For non-historical Values the same convention may be used by always using
 only one segment in the range 
\begin_inset Formula $\left[-\infty,+\infty\right)$
\end_inset 

.
 See figure 
\begin_inset LatexCommand \ref{cap:Time-lines-for-Values}

\end_inset 

 for an illustration.
\layout Subsection


\begin_inset LatexCommand \label{sub:Structure-Types}

\end_inset 

Structure Types
\layout Standard


\begin_inset Note
collapsed false

\layout Standard

We need to include some figures here in order to illustrate the concepts.
\end_inset 


\layout Standard

In order to use a given structure as the type of a Parameter or as the element
 type of a list Parameter, the structure to be used must be defined first.
\layout Standard

For this purpose, ORE holds a repository of Structure Types.
 For each one of these the following information is stored:
\layout Itemize

Structure Type ID (auto-generated by the platform), that is a numeric unique
 identifier for the Structure Type inside ORE.
\layout Itemize

Structure Type name, a string with a unique, short name used for Procedures
 and other program entities to identify the Structure Type.
\layout Standard

Fields for each Structure Type are defined as Parameter Definitions whose
 definition place points to the specific Structure Type.
\layout Section

Event Types and Rated Event Records
\layout Section

Invoices
\layout Section

Business Procedures
\the_end
